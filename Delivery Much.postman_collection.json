{
	"info": {
		"_postman_id": "cd1cea33-60be-410f-9080-6b7491f9b2e8",
		"name": "Delivery Much",
		"description": "O time de desenvolvimento recebeu a demanda de criar um serviço web que\r\nconverte números decimais em sua versão por extenso. Este sistema obedecerá as\r\nseguintes regras:\r\n\r\n\r\n\r\n\r\n1. Servidor HTTP que funcionará apenas para requisições GET;\r\n\r\n\r\n2. Sistema permitirá utilizar apenas números no intervalo entre [-10000, 10000];\r\n\r\n\r\n3. Ao se fazer essa requisição, retornará um JSON cuja chave \"extenso\" terá, em\r\nseu valor, o número inteiro por extenso, que foi inserido na path;\r\n\r\n\r\n4. Pensando-se na internacionalização deste, o serviço terá suporte, além de\r\nportugues, para tambem em ingles;\r\n\r\n\r\n5. Caso não seja possível converter o valor inserido na path, chave “extenso” terá valor “Invalid data”;\r\n\r\n\r\n6. Para estes casos, resposta deve ter status 400;\r\n\r\n\r\n7. Para os casos válidos, resposta deve ter status 200.\r\n\r\n\r\n\r\nSendo assim, a equipe de desenvolvimento disponibilizou os seguinte serviço web \r\nhttp://challengeqa.staging.devmuch.io, que permite que se visualizasse dois tipos de resposta:\r\n\r\n\r\n\r\nResposta Idioma Português: http://challengeqa.staging.devmuch.io/ \r\n\r\n\r\n\r\nResposta Idioma Inglês:    http://challengeqa.staging.devmuch.io/en/\r\n\r\n\r\n\r\nFoi realizado os testes em Português e em Inglês, seguindo as regras impostas, incrementamos também o FLUXO FELIZ E FLUXO TRISTE afim de testarmos caminhos aleatórios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Português ",
			"item": [
				{
					"name": "Fluxo Feliz ",
					"item": [
						{
							"name": "Extenso  -10000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'menos dez mil'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('menos dez mil')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/-10000",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"-10000"
									]
								},
								"description": "Teste para validação do Extenso -10000.\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'menos dez mil'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso  -10000",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/-10000",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"-10000"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "28"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:21:11 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"menos dez mil\"\n}"
								}
							]
						},
						{
							"name": "Extenso  10000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'dez mil'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('dez mil')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/10000",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"10000"
									]
								},
								"description": "Teste para validação do Extenso 10000.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'dez mil'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso  10000",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/10000",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"10000"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "27"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:15:55 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"ten thousand\"\n}"
								}
							]
						},
						{
							"name": "Extenso -9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'menos nove mil novecentos e noventa e nove'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('menos nove mil novecentos e noventa e nove')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/-9999",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"-9999"
									]
								},
								"description": "Teste para validação do Extenso -9999.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'menos nove mil novecentos e noventa e nove'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso -9999",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/-9999",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"-9999"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "57"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:14:05 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"menos nove mil novecentos e noventa e nove\"\n}"
								}
							]
						},
						{
							"name": "Extenso 9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'nove mil novecentos e noventa e nove'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('nove mil novecentos e noventa e nove')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/9999",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"9999"
									]
								},
								"description": "Teste para validação do Extenso 9999.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'nove mil novecentos e noventa e nove'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso 9999",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/9999",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"9999"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "51"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:02:31 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"nove mil novecentos e noventa e nove\"\n}"
								}
							]
						}
					],
					"description": "Caminho Status 200 OK"
				},
				{
					"name": "Fluxo Triste ",
					"item": [
						{
							"name": "Extenso -10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo triste (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '400 BAD REQUEST'\", () => {\r",
											"        response.should.have.status(400);\r",
											"        pm.response.to.have.status(\"BAD REQUEST\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.badRequest;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'Invalid data'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('Invalid data')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/-10001",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"-10001"
									]
								},
								"description": "Teste para validação do Extenso -10001.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '400 BAD REQUEST'\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'Invalid data'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso -10001",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/-10001",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"-10001"
											]
										}
									},
									"status": "BAD REQUEST",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "27"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:32:08 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"Invalid data\"\n}"
								}
							]
						},
						{
							"name": "Extenso  10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo triste (pt) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '400 BAD REQUEST'\", () => {\r",
											"        response.should.have.status(400);\r",
											"        pm.response.to.have.status(\"BAD REQUEST\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.badRequest;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'extenso' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('extenso');\r",
											"        pm.expect(jsonData.extenso).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'extenso' deverá ser igual a 'Invalid data'\", () => {\r",
											"        pm.expect(jsonData.extenso).to.eql('Invalid data')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/10001",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"10001"
									]
								},
								"description": "Teste para validação do Extenso 10001.\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '400 BAD REQUEST'\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'extenso' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'extenso' deverá ser igual a 'Invalid data'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso  10001",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/10001",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"10001"
											]
										}
									},
									"status": "BAD REQUEST",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "27"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 01:33:15 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"extenso\": \"Invalid data\"\n}"
								}
							]
						}
					],
					"description": "status 400"
				}
			],
			"description": "Escrita Em PT"
		},
		{
			"name": "Inglês ",
			"item": [
				{
					"name": "Fluxo Feliz ",
					"item": [
						{
							"name": "Extenso -10000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'minus ten thousand'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('minus ten thousand')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/-10000",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"-10000"
									]
								},
								"description": "Teste para validação do Extenso -10000.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'mines ten thousand'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso -10000",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/-10000",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"-10000"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "18"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:24:48 GMT"
										}
									],
									"cookie": [],
									"body": "minus ten thousand"
								}
							]
						},
						{
							"name": "Extenso   10000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'ten thousand'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('ten thousand')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/10000",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"10000"
									]
								},
								"description": "Teste para validação do Extenso 10000.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'ten thousand'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso   10000",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/10000",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"10000"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "24"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:14:07 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"full\": \"ten thousand\"\n}"
								}
							]
						},
						{
							"name": "Extenso -9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'minus nine thousand, nine hundred and ninety-nine'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('minus nine thousand, nine hundred and ninety-nine')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/-9999",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"-9999"
									]
								},
								"description": "Teste para validação do Extenso -9999.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'minus nine thousand, nine hundred and ninety-nine'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso -9999",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/-9999",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"-9999"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "61"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:15:06 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"full\": \"minus nine thousand, nine hundred and ninety-nine\"\n}"
								}
							]
						},
						{
							"name": "Extenso 9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo feliz (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '200 OK'\", () => {\r",
											"        response.should.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.ok;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'nine thousand, nine hundred and ninety-nine'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('nine thousand, nine hundred and ninety-nine')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/9999",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"9999"
									]
								},
								"description": "Teste para validação do Extenso 9999.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '200 OK\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'nine thousand, nine hundred and ninety-nine'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso 9999",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/9999",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"9999"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "55"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:15:59 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"full\": \"nine thousand, nine hundred and ninety-nine\"\n}"
								}
							]
						}
					],
					"description": "Status 200 OK"
				},
				{
					"name": "Fluxo Triste ",
					"item": [
						{
							"name": "Extenso  -10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo triste (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '400 BAD REQUEST'\", () => {\r",
											"        response.should.have.status(400);\r",
											"        pm.response.to.have.status(\"BAD REQUEST\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.badRequest;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'Invalid data'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('Invalid data')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/-10001",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"-10001"
									]
								},
								"description": "Teste para validação do Extenso -10001.\r\n\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n\r\n. Status code deverá ser '400 BAD REQUEST'\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'Invalid data'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso  -10001",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/-10001",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"-10001"
											]
										}
									},
									"status": "UNAUTHORIZED",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "24"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:20:26 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"full\": \"Invalid data\"\n}"
								}
							]
						},
						{
							"name": "Extenso  10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"describe('Testes fluxo triste (en) ', () => {\r",
											"\r",
											"    it(\"Status code deverá ser '400 BAD REQUEST'\", () => {\r",
											"        response.should.have.status(400);\r",
											"        pm.response.to.have.status(\"BAD REQUEST\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser um objeto\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\");\r",
											"    })\r",
											"\r",
											"    it(\"Response deverá ser válido e ter um body\", () => {\r",
											"        pm.response.to.be.badRequest;\r",
											"        pm.response.to.be.withBody;\r",
											"    })\r",
											"\r",
											"    it(\"Chave 'full' deverá existir e ser uma string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('full');\r",
											"        pm.expect(jsonData.full).to.be.a('string');\r",
											"    });\r",
											"  \r",
											"    it(\"Valor da chave 'full' deverá ser igual a 'Invalid data'\", () => {\r",
											"        pm.expect(jsonData.full).to.eql('Invalid data')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header ideverá ser application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"    })\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://challengeqa.staging.devmuch.io/en/10001",
									"protocol": "http",
									"host": [
										"challengeqa",
										"staging",
										"devmuch",
										"io"
									],
									"path": [
										"en",
										"10001"
									]
								},
								"description": "Teste para validação do Extenso 10001.\r\n\r\n\r\n\r\nResultados esperados: \r\n\r\n\r\n\r\n. Status code deverá ser '400 BAD REQUEST'\r\n\r\n\r\n. Response deverá ser um objeto \r\n\r\n\r\n. Response deverá ser válido e ter um body\r\n\r\n\r\n. Chave 'full' deverá existir e ser uma string\r\n\r\n\r\n. Valor da chave 'full' deverá ser igual a 'Invalid data'\r\n\r\n\r\n. Content-Type header deverá ser application/json"
							},
							"response": [
								{
									"name": "Extenso  10001",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://challengeqa.staging.devmuch.io/en/10001",
											"protocol": "http",
											"host": [
												"challengeqa",
												"staging",
												"devmuch",
												"io"
											],
											"path": [
												"en",
												"10001"
											]
										}
									},
									"status": "UNAUTHORIZED",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "24"
										},
										{
											"key": "Server",
											"value": "Werkzeug/1.0.1 Python/3.7.9"
										},
										{
											"key": "Date",
											"value": "Sat, 23 Jan 2021 02:20:58 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"full\": \"Invalid data\"\n}"
								}
							]
						}
					],
					"description": "Status 400 "
				}
			]
		},
		{
			"name": "install postman bdd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jamesmessinger.com/postman-bdd/dist/postman-bdd.js",
					"protocol": "https",
					"host": [
						"jamesmessinger",
						"com"
					],
					"path": [
						"postman-bdd",
						"dist",
						"postman-bdd.js"
					]
				},
				"description": "Instalando Postman BDD.\r\n\r\n\r\nA instalação é feita acionando uma solicitação Get e definindo a resposta como variável de ambiente global.\r\n\r\n\r\n\r\nCrie uma solicitação GET para http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.js\r\n\r\n\r\nDefina a variável de ambiente global usando o comando abaixo na guia de teste.\r\n\r\n\r\n postman.setGlobalVariable('postmanBDD', responseBody);"
			},
			"response": []
		},
		{
			"name": "Sample Request ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}